{
    "$schema": "http://schema.management.azure.com/schemas/2018-05-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "image": {
            "type": "string",
            "defaultValue": "neo4j",
            "allowedValues": [
                "neo4j",
                "ryguyrg/neo4j-panama-papers",
                "ryguyrg/neo4j-paradise-papers",
                "syedhassaanahmed/neo4j-adventureworks",
                "syedhassaanahmed/neo4j-air-routes",
                "syedhassaanahmed/neo4j-azure-services",
                "syedhassaanahmed/neo4j-belgian-rail",
                "syedhassaanahmed/neo4j-boston-meetup",
                "syedhassaanahmed/neo4j-brexit",
                "syedhassaanahmed/neo4j-buzzfeed-trumpworld",
                "syedhassaanahmed/neo4j-egonet-facebook",
                "syedhassaanahmed/neo4j-europe-cities",
                "syedhassaanahmed/neo4j-europe-politics",
                "syedhassaanahmed/neo4j-football-transfers",
                "syedhassaanahmed/neo4j-game-of-thrones",
                "syedhassaanahmed/neo4j-goodreads",
                "syedhassaanahmed/neo4j-inside-airbnb",
                "syedhassaanahmed/neo4j-legis-graph",
                "syedhassaanahmed/neo4j-london-tube",
                "syedhassaanahmed/neo4j-marvel",
                "syedhassaanahmed/neo4j-medicare",
                "syedhassaanahmed/neo4j-northwind",
                "syedhassaanahmed/neo4j-pole",
                "syedhassaanahmed/neo4j-python-dependencies",
                "syedhassaanahmed/neo4j-reddit-memes",
                "syedhassaanahmed/neo4j-retail-recommendations",
                "syedhassaanahmed/neo4j-stackexchange",
                "syedhassaanahmed/neo4j-star-wars",
                "syedhassaanahmed/neo4j-thoughtworks-radar"
            ],
            "metadata": {
                "description": "Neo4j based Docker image"
            }
        },
        "neo4jPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for 'Neo4j' user"
            }
        },
        "cpu": {
            "type": "int",
            "defaultValue": 4,
            "minValue": 1,
            "maxValue": 4,
            "metadata": {
                "description": "Number of CPU cores"
            }
        },
        "memoryInGb": {
            "type": "int",
            "defaultValue": 14,
            "minValue": 2,
            "maxValue": 14,
            "metadata": {
                "description": "Memory size in GB"
            }
        },
        "migrateToCosmosDb": {
            "type": "string",
            "defaultValue": "false",
            "metadata": {
                "description": "Flag if Cosmos DB should be created and neo-to-cosmos started. String datatype is used otherwise validation in 'Deploy to Azure' UI fails."
            }
        }
    },
    "variables": {
        "containerId": "[resourceId('Microsoft.ContainerInstance/containerGroups', variables('graphDbName'))]",
        "graphDbName": "[split(last(split(parameters('image'), '/')), ':')[0]]",
        "neo4jMemoryInMb": "[mul(sub(parameters('memoryInGb'), 1), 512)]",
        "neo4jPorts": [
            {
                "port": 7473
            },
            {
                "port": 7687
            }
        ]
    },
    "resources": [
        {
            "name": "[variables('graphDbName')]",
            "type": "Microsoft.ContainerInstance/containerGroups",
            "apiVersion": "2018-10-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "containers": [
                    {
                        "name": "[variables('graphDbName')]",
                        "properties": {
                            "image": "[parameters('image')]",
                            "resources": {
                                "requests": {
                                    "cpu": "[parameters('cpu')]",
                                    "memoryInGb": "[parameters('memoryInGb')]"
                                }
                            },
                            "environmentVariables": [
                                {
                                    "name": "NEO4J_AUTH",
                                    "secureValue": "[concat('neo4j/', parameters('neo4jPassword'))]"
                                },
                                {
                                    "name": "NEO4J_dbms_memory_pagecache_size",
                                    "value": "[concat(variables('neo4jMemoryInMb'), 'M')]"
                                },
                                {
                                    "name": "NEO4J_dbms_memory_heap_maxSize",
                                    "value": "[variables('neo4jMemoryInMb')]"
                                }
                            ],
                            "ports": "[variables('neo4jPorts')]"
                        }
                    }
                ],
                "osType": "Linux",
                "ipAddress": {
                    "type": "Public",
                    "ports": "[variables('neo4jPorts')]"
                }
            }
        },
        {
            "name": "neo-to-cosmos",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-09-01",
            "condition": "[equals(bool(parameters('migrateToCosmosDb')), bool('true'))]",
            "dependsOn": [
                "[variables('containerId')]"
            ],            
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/syedhassaanahmed/neo-to-cosmos/master/azuredeploy.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "cosmosDbCollection": {
                        "value": "[variables('graphDbName')]"
                    },
                    "neo4jBolt": {
                        "value": "[concat('bolt://', reference(variables('containerId')).ipAddress.ip, ':7687')]"
                    },
                    "neo4jPassword": {
                        "value": "[parameters('neo4jPassword')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "ipAddress": {
            "type": "string",
            "value": "[reference(variables('containerId')).ipAddress.ip]"
        }
    }
}